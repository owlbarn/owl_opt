{1 Owl Opt Library}

The entry point of this library is {!module:Owl_opt}.

{2 Workflow} 

+ define a record type ['a t] in some module [Prms]
+ apply ppx deriver [@@deriving prms] to type ['a t] so that [Prms] has type {!Owl_opt.Prms.PT}
+ pass [Prms] through your favourite algorithm functor to create an optimisation module [O]
+ define an objective function [f] that takes as input your record type ['a t] 
+ define initial parameters [prms0]
+ define learning rates [lr] with {!module:Owl_opt.Lr}
+ initialise optimisation state [s] with [O.init ~prms0 ()]
+ define stoping criterion function [stop: float -> state -> bool] 
+ minimise [f] for the optimisation session with [O.min ~stop ~f s]


{2 Example} 

{@ocaml file=mdx/doc.ml[
 module Prms = struct
    type 'a t = {a: 'a; b: 'a} [@@deriving prms]
 end
 open Prms

 (* make an Adam optimisation module for the parameter definition Prms *)
 module O = Owl_opt.D.Adam.Make (Prms)

 let x = Owl.Algodiff.D.Mat.gaussian 5 1
 let a = Owl.Algodiff.D.Mat.gaussian 5 5
 let b = Owl.Algodiff.D.Mat.gaussian 5 1
 let y = Owl.Algodiff.D.Maths.((a *@ x) + b)

 (* define the objective function *)
 let f _ prms = Owl.Algodiff.D.Maths.(l2norm' (y - ((prms.a *@ x) + prms.b))) 
 (* define initial parameters *)
 let prms0 = {a = Owl.Algodiff.D.Mat.gaussian 5 5; b = Owl.Algodiff.D.Mat.gaussian 5 1} 
 (* define fixed learning rate *)
 let lr = Owl_opt.Lr.(Fix 1E-4) 
 (* initialise an optimisation session *)
 let s = O.init ~prms0 ~beta1:0.99 ~beta2:0.999 ~lr () 
 (* define stopping criteria: stop when function value is smaller than 1E-4 *)
 let stop fv _s = fv < 1E-4
 (* minimise [f] for session [s] and returns final loss *)
 let fv = O.min ~f ~stop s
 (* get optimized prms *)
 let prms = O.prms s
 (* get numeric solution *)
 let solution = Prms.map ~f:Owl.Algodiff.D.unpack_arr prms
]}
 
{2 Important modules }

{3 1. Parameters}
- module {!Owl_opt.Prms} and module type definition {!Owl_opt.Prms.PT}

{3 2. Learning rate}
- module {!Owl_opt.Lr}

{3 3. Double-precision} 
- Vanilla gradient descent {!Owl_opt.D.Gd.Make}

- Adam {!Owl_opt.D.Adam.Make}

- Rmsprop {!Owl_opt.D.Rmsprop.Make}

- Lbfgs (see {{:../owl-opt-lbfgs/index.html}Owl Opt Lbfgs})

{3 4. Single-precision}
- Vanilla gradient descent {!Owl_opt.S.Gd.Make}

- Adam {!Owl_opt.S.Adam.Make}

- Rmsprop {!Owl_opt.S.Rmsprop.Make}

- Lbfgs (see {{:../owl-opt-lbfgs/index.html}Owl Opt Lbfgs})

 
